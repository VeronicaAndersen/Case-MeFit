{"version":3,"sources":["../source/form.js"],"names":["Context","Form","props","values","requiredMessage","plugins","wait","state","resetCounter","generateInitialFormState","submitting","dispatch","onRegisterField","onUnregisterField","getSubmittedValue","getRequiredMessage","focus","getValues","map","Plugin","plugin","initContext","autoFocus","mounted","onMount","prevProps","setFormSubmitting","cleanUpRemovedFields","onUnmount","newState","callback","watchedFieldsList","field","prevValue","newValue","setState","fields","errors","Object","keys","undefined","validate","scrollDuration","searchForInvalidField","_set","changed","scroll","duration","setTimeout","fieldValues","key","applyPluginValueTransforms","action","onError","result","error","then","onSubmitPromise","onAfterSubmit","focusableBeforeSubmit","document","activeElement","body","getSubmitButtonNode","force","Element","contains","forceRestoreFocus","restoreFocus","Promise","resolve","promise","snapshotFocus","resetFormSubmittingState","firstField","children","setFormNode","propTypes","onSubmit","reset","set","clear","watch","Component","PropTypes","func","isRequired","onBeforeSubmit","onAbandon","object","bool","trim","string","number","arrayOf","oneOfType","node","defaultProps","OnAbandonPlugin","ListPlugin","watchedFields","value","onChange","getInitialValue","initialValue","forceUpdate","updateState","name","initialValues","getValue","NOT_FOUND","resetField","onReset","initialFormState","getFocusable","onResetField","removeField","event","preventDefault","executeFormAction","getSubmittedValues","options","get","push","form","querySelector","Children","validationErrors","showErrors","latestFocusedField","contextPropType","shape","onRegisterList"],"mappings":"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","file":"form.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport createContext from 'create-react-context'\r\n\r\nimport OnAbandonPlugin from './plugins/OnAbandonPlugin'\r\nimport ListPlugin from './plugins/ListPlugin'\r\nimport { getPassThroughProps, getValues, getValue, getNext, NOT_FOUND } from './utility'\r\n\r\nimport {\r\n\tsetFormSubmitting,\r\n\tsetFieldValue,\r\n\tsetFieldValidationError,\r\n\tregisterField,\r\n\tunregisterField,\r\n\tremoveField\r\n} from './actions'\r\n\r\nexport const Context = createContext()\r\n\r\nexport default class Form extends Component {\r\n\tstatic propTypes = {\r\n\t\tonSubmit: PropTypes.func.isRequired,\r\n\t\tonBeforeSubmit: PropTypes.func,\r\n\t\tonAfterSubmit: PropTypes.func,\r\n\t\tonAbandon: PropTypes.func,\r\n\t\tvalues: PropTypes.object,\r\n\t\tautoFocus: PropTypes.bool.isRequired,\r\n\t\ttrim: PropTypes.bool.isRequired,\r\n\t\trequiredMessage: PropTypes.string.isRequired,\r\n\t\twait: PropTypes.bool.isRequired,\r\n\t\tonError: PropTypes.func.isRequired,\r\n\t\tscrollDuration: PropTypes.number.isRequired,\r\n\t\tplugins: PropTypes.arrayOf(PropTypes.func).isRequired,\r\n\t\tchildren: PropTypes.oneOfType([\r\n\t\t\tPropTypes.func,\r\n\t\t\tPropTypes.node\r\n\t\t]).isRequired\r\n\t}\r\n\r\n\tstatic defaultProps = {\r\n\t\tautoFocus: false,\r\n\t\ttrim: true,\r\n\t\trequiredMessage: 'Required',\r\n\t\twait: false,\r\n\t\tonError: (error) => false,\r\n\t\tscrollDuration: 300,\r\n\t\tplugins: [\r\n\t\t\tOnAbandonPlugin,\r\n\t\t\tListPlugin\r\n\t\t]\r\n\t}\r\n\r\n\t// Stores fields' `validate()` functions which are used\r\n\t// when calling `set(field, value)` and `clear(field)`.\r\n\t// Also stores fields' `scroll()` and `focus()` functions.\r\n\tfields = {}\r\n\r\n\twatchedFields = {}\r\n\twatchedFieldsList = []\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tconst { values, requiredMessage, plugins, wait } = this.props\r\n\t\tthis.state = {\r\n\t\t\tresetCounter: 0,\r\n\t\t\t...generateInitialFormState(values, { submitting: wait }),\r\n\t\t\tdispatch: this.dispatch,\r\n\t\t\tonRegisterField: this.onRegisterField,\r\n\t\t\tonUnregisterField: this.onUnregisterField,\r\n\t\t\tgetSubmittedValue: this.getSubmittedValue,\r\n\t\t\tgetRequiredMessage: () => requiredMessage,\r\n\t\t\t// These're used by `<List/>`.\r\n\t\t\tfocus: this.focus,\r\n\t\t\tgetValues: this.values\r\n\t\t}\r\n\t\tthis.plugins = plugins.map(Plugin => new Plugin(() => this.props, () => this.state))\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.initContext) {\r\n\t\t\t\tplugin.initContext(this.state)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { autoFocus } = this.props\r\n\r\n\t\tthis.mounted = true\r\n\r\n\t\t// First `form.constructor` is called,\r\n\t\t// then `form.componentWillMount` is called,\r\n\t\t// then `field.constructor` is called,\r\n\t\t// then `field.componentWillMount` is called,\r\n\t\t// then `field.componentDidMount` is called,\r\n\t\t// then `form.componentDidMount` is called.\r\n\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.onMount) {\r\n\t\t\t\tplugin.onMount()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Autofocus the form when it's mounted and all of its fields are initialized.\r\n\t\tif (autoFocus) {\r\n\t\t\tthis.focus()\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tconst { wait } = this.props\r\n\t\tif (wait !== prevProps.wait) {\r\n\t\t\tthis.setFormSubmitting(wait)\r\n\t\t}\r\n\t\tthis.cleanUpRemovedFields()\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.onUnmount) {\r\n\t\t\t\tplugin.onUnmount()\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.mounted = false\r\n\t}\r\n\r\n\tupdateState(newState, callback) {\r\n\t\t// See if any fields are watched.\r\n\t\t// If they are, see if their values have changed.\r\n\t\t// If they have, re-render the form after updating state.\r\n\t\tfor (const field of this.watchedFieldsList) {\r\n\t\t\tconst prevValue = this.state.values[field]\r\n\t\t\tconst newValue = newState.values[field]\r\n\t\t\tif (newValue !== prevValue) {\r\n\t\t\t\t// Re-render the form after updating state.\r\n\t\t\t\tnewState = { ...newState }\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Update state.\r\n\t\tthis.setState(newState, callback)\r\n\t}\r\n\r\n\t// `value` parameter is an initial field value.\r\n\t// It is used later in case of a form or field reset.\r\n\tonRegisterField = (field, {\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tvalidate,\r\n\t\terror,\r\n\t\tscroll,\r\n\t\tfocus\r\n\t}) => {\r\n\t\tif (value === undefined) {\r\n\t\t\tvalue = this.getInitialValue(field)\r\n\t\t}\r\n\r\n\t\t// The stored field info is used to `validate()` field `value`s\r\n\t\t// and set the corresponding `error`s\r\n\t\t// when calling `set(field, value)` and `clear(field)`.\r\n\t\t//\r\n\t\t// If a field happens to register the second time\r\n\t\t// (e.g. as a result of React \"reconciliation\" because of the order change)\r\n\t\t// then the methods for the field will be updated.\r\n\t\t//\r\n\t\tthis.fields[field] = {\r\n\t\t\tinitialValue: value,\r\n\t\t\tvalidate,\r\n\t\t\tscroll,\r\n\t\t\tfocus,\r\n\t\t\tonChange\r\n\t\t}\r\n\t\t// This is used for the `autofocus` feature.\r\n\t\tif (!this.firstField) {\r\n\t\t\tthis.firstField = field\r\n\t\t}\r\n\t\tthis.dispatch(registerField({\r\n\t\t\tfield,\r\n\t\t\tvalue,\r\n\t\t\tvalidate,\r\n\t\t\terror\r\n\t\t}))\r\n\t}\r\n\r\n\tonUnregisterField = (field) => {\r\n\t\tthis.dispatch(unregisterField(field))\r\n\t\t// Rerender the form so that the field is\r\n\t\t// removed if it's no longer mounted.\r\n\t\tthis.forceUpdate()\r\n\t}\r\n\r\n\t/**\r\n\t * `callback` is currently only used when calling\r\n\t * `context.dispatch(setFormSubmitting(false))`.\r\n\t * @param  {function}   action — A function of `state`.\r\n\t * @param  {function} callback\r\n\t */\r\n\tdispatch = (action, callback) => {\r\n\t\taction(this.state)\r\n\r\n\t\t// A `React.Component` always re-renders on `this.setState()`,\r\n\t\t// even if the `state` hasn't changed.\r\n\t\t// The re-rendering of the `<Form/>` is used to re-render\r\n\t\t// the `<Field/`>s with the updated `value`s.\r\n\t\t// This could potentially result in slower performance\r\n\t\t// on `<Form/>`s with a lots of `<Field/>`s\r\n\t\t// (maybe hundreds or something like that?)\r\n\t\t// but on regular `<Form/>`s I didn't notice any lag.\r\n\t\t// A possible performance optimization could be\r\n\t\t// not calling `this.setState()` for `<Form/>` re-rendering\r\n\t\t// and instead calling something like `this.forceUpdate()`\r\n\t\t// on the `<Field/>` that called `context.dispatch()`.\r\n\t\t//\r\n\t\t// `this.setState()` is called on `this.state`\r\n\t\t// rather than creating a new `state` because `this.state`\r\n\t\t// is used as the `context` property for `React.Context`\r\n\t\t// meaning that `state` reference shouldn't change.\r\n\t\t//\r\n\t\tthis.updateState(this.state, callback)\r\n\r\n\t\t// const { onStateChange } = this.props\r\n\t\t// if (onStateChange) {\r\n\t\t// \tonStateChange(this.state)\r\n\t\t// }\r\n\t}\r\n\r\n\tgetSubmittedValue = (value) => {\r\n\t\tconst { trim } = this.props\r\n\t\tif (trim && typeof value === 'string') {\r\n\t\t\tvalue = value.trim()\r\n\t\t}\r\n\t\t// Convert empty strings to `null`.\r\n\t\t//\r\n\t\t// Using `undefined` instead of `null` wouldn't work because the browser\r\n\t\t// wouldn't send such fields to the server because `JSON.stringify()` skips\r\n\t\t// `undefined` properties when converting a JSON object to a string.\r\n\t\t//\r\n\t\t// Sending a `null` field value rather than omitting it entirely from an HTTP request\r\n\t\t// is used in order to be able to \"clear\" the form field value on the server side.\r\n\t\t//\r\n\t\tif (value === '') {\r\n\t\t\tvalue = null\r\n\t\t}\r\n\t\treturn value\r\n\t}\r\n\r\n\tgetInitialValue = (name) => {\r\n\t\tconst { initialValues } = this.state\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.getValue) {\r\n\t\t\t\tconst value = plugin.getValue(initialValues, name)\r\n\t\t\t\tif (value !== NOT_FOUND) {\r\n\t\t\t\t\treturn value\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn getValue(initialValues, name)\r\n\t}\r\n\r\n\t// Public API\r\n\t/**\r\n\t * Returns form field values.\r\n\t * @return {object}\r\n\t */\r\n\tvalues = () => {\r\n\t\tconst { values, fields } = this.state\r\n\t\treturn this.applyPluginValueTransforms(getValues(values, fields))\r\n\t}\r\n\r\n\t/**\r\n\t * Applies plugins' transformations to form field values.\r\n\t * @param  {object} values\r\n\t * @return {object}\r\n\t */\r\n\tapplyPluginValueTransforms(values) {\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.getValues) {\r\n\t\t\t\tvalues = plugin.getValues(values)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn values\r\n\t}\r\n\r\n\t// Public API\r\n\treset = (field) => {\r\n\t\t// `<Form/>` `.reset()` instance method no longer accepts `fieldName: string` argument.\r\n\t\t// It still works the old way, but the `fieldName: string` arugment is considered deprecated.\r\n\t\t// It worked in a weird way: reset the field to its initial value rather than `undefined`.\r\n\t\t// To reset a field, use `.clear(fieldName)` instance method instead.\r\n\t\tif (typeof field === 'string') {\r\n\t\t\treturn this.resetField(field)\r\n\t\t}\r\n\r\n\t\tconst { autoFocus, plugins, wait } = this.props\r\n\t\tconst { fields, initialValues, resetCounter } = this.state\r\n\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.onReset) {\r\n\t\t\t\tplugin.onReset()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `this.setState()` is called on `this.state`\r\n\t\t// rather than creating a new `state` because `this.state`\r\n\t\t// is used as the `context` property for `React.Context`\r\n\t\t// meaning that `state` reference shouldn't change.\r\n\r\n\t\t// Changing `resetCounter` results in a complete re-mounting of the `<form/>`,\r\n\t\t// including all of the `<Field/>`s.\r\n\t\tthis.state.resetCounter = getNext(resetCounter)\r\n\r\n\t\t// All `<Field/>`s will be re-mounted and re-registered.\r\n\t\tconst initialFormState = generateInitialFormState(initialValues, { submitting: wait })\r\n\t\tfor (const key of Object.keys(initialFormState)) {\r\n\t\t\tthis.state[key] = initialFormState[key]\r\n\t\t}\r\n\r\n\t\t// `generateInitialFormState()` produces a state with zero `fields` counters.\r\n\t\t// But, subsequently, the change to `resetCounter` results in  a complete\r\n\t\t// re-mounting of the `<form/>`, including all of the `<Field/>`s, which\r\n\t\t// decrements all `fields` counters.\r\n\t\t// If the current `fields` counters weren't preserved, then the counters\r\n\t\t// would first be decremented to `-1` on unmount, and then incremented to `0`\r\n\t\t// on re-mount, and the form would think that no fields are mounted.\r\n\t\t// Preserving the current non-zero `fields` counters fixes that.\r\n\t\tthis.state.fields = fields\r\n\r\n\t\t// Reset first focusable field since the form is gonna be reset.\r\n\t\tthis.firstField = undefined\r\n\r\n\t\tthis.updateState(this.state, () => {\r\n\t\t\tif (!this.mounted) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t// Autofocus the form (if not configured otherwise)\r\n\t\t\tif (autoFocus) {\r\n\t\t\t\t// If `reset()` was called inside `onSubmit()`, then\r\n\t\t\t\t// don't focus on a field here because it might be `disabled`.\r\n\t\t\t\t// Instead, schedule the autofocus for later, when the fields\r\n\t\t\t\t// are no longer disabled.\r\n\t\t\t\tif (this.state.submitting) {\r\n\t\t\t\t\tthis.focusableBeforeSubmit = this.getFocusable()\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.focus()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Trigger each `<Field/>`'s `onChange()` handler.\r\n\t\t\tfor (const field of Object.keys(fields)) {\r\n\t\t\t\t// If the field is still mounted.\r\n\t\t\t\tif (this.fields[field]) {\r\n\t\t\t\t\tconst { onChange, initialValue } = this.fields[field]\r\n\t\t\t\t\tif (onChange) {\r\n\t\t\t\t\t\tonChange(initialValue)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t// Not tested.\r\n\tresetField = (name) => {\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.onResetField) {\r\n\t\t\t\tif (plugin.onResetField(name, this)) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst initialValue = !this.fields[name] || this.fields[name].initialValue === undefined ? this.getInitialValue(name) : this.fields[name].initialValue\r\n\t\tthis.dispatch(setFieldValue(name, initialValue))\r\n\t\t// A default value isn't supposed to generate an error.\r\n\t\tthis.dispatch(setFieldValidationError(name, undefined))\r\n\t\t// Trigger the `<Field/>`'s `onChange()` handler.\r\n\t\t// If the field is still mounted.\r\n\t\tif (this.fields[name]) {\r\n\t\t\tconst { onChange, initialValue } = this.fields[name]\r\n\t\t\tif (onChange) {\r\n\t\t\t\tonChange(initialValue)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tremoveField = (field) => {\r\n\t\tthis.dispatch(removeField(field))\r\n\t\tdelete this.fields[field]\r\n\t}\r\n\r\n\tcleanUpRemovedFields = () => {\r\n\t\tconst { fields } = this.state\r\n\t\tfor (const field of Object.keys(fields)) {\r\n\t\t\t// Remove unmounted `<Field/>`s.\r\n\t\t\tif (fields[field] === 0) {\r\n\t\t\t\tthis.removeField(field)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Is called when the form has been submitted.\r\n\tonAfterSubmit = () => {\r\n\t\tconst { onAfterSubmit } = this.props\r\n\t\tfor (const plugin of this.plugins) {\r\n\t\t\tif (plugin.onAfterSubmit) {\r\n\t\t\t\tplugin.onAfterSubmit()\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (onAfterSubmit) {\r\n\t\t\tonAfterSubmit()\r\n\t\t}\r\n\t}\r\n\r\n\tsearchForInvalidField() {\r\n\t\tconst {\r\n\t\t\tfields,\r\n\t\t\tvalues,\r\n\t\t\terrors\r\n\t\t} = this.state\r\n\r\n\t\t// Re-run `validate()` for each field.\r\n\t\t// Because `validate()` function takes two arguments:\r\n\t\t// the current field value and all form field values,\r\n\t\t// and at the same time it's only called in field's `onChange`,\r\n\t\t// therefore other form field values could change since then\r\n\t\t// and that particular `validate()` wouldn't get called\r\n\t\t// without this explicit \"revalidate all fields before submit\".\r\n\t\tfor (const field of Object.keys(fields)) {\r\n\t\t\t// If the field is not mounted then ignore it.\r\n\t\t\tif (!fields[field]) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t// Check for an externally set `error`.\r\n\t\t\tif (errors[field] !== undefined) {\r\n\t\t\t\treturn field\r\n\t\t\t}\r\n\t\t\t// If the field's `value` is not valid,\r\n\t\t\t// `validate(value)` returns a validation error message (or `true`).\r\n\t\t\tif (this.fields[field].validate(values[field])) {\r\n\t\t\t\treturn field\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tconst { scrollDuration } = this.props\r\n\t\tconst { fields, values } = this.state\r\n\r\n\t\t// Are there any invalid fields.\r\n\t\t// Returns the first one.\r\n\t\tconst field = this.searchForInvalidField()\r\n\r\n\t\tif (!field) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Re-validate all fields to highlight all required ones that're empty.\r\n\t\t// Otherwise, it'd just stop at the first not-valid field\r\n\t\t// and the user would just see that single field highlighted\r\n\t\t// as \"Required\", and then they'd have to re-submit the form\r\n\t\t// just to find out that some other field is \"Required\" too,\r\n\t\t// so it's better \"user experience\" to just highlight all\r\n\t\t// required fields right away.\r\n\t\tfor (const field of Object.keys(fields)) {\r\n\t\t\t// Trigger `validate()` on the field\r\n\t\t\t// so that `errors` is updated inside form state.\r\n\t\t\t// (if the field is still mounted)\r\n\t\t\tif (fields[field]) {\r\n\t\t\t\tthis._set(field, values[field], { changed: false })\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Scroll to the invalid field.\r\n\t\tthis.scroll(field, { duration: scrollDuration })\r\n\r\n\t\t// Focus the invalid field after it has been scrolled to.\r\n\t\tsetTimeout(() => {\r\n\t\t\tif (this.mounted) {\r\n\t\t\t\t// Focus the invalid field.\r\n\t\t\t\tthis.focus(field)\r\n\t\t\t}\r\n\t\t}, scrollDuration)\r\n\r\n\t\t// The form is invalid.\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Collects the currently \"registered\" fields' values.\r\n\t * @return {object} `values`\r\n\t */\r\n\tgetSubmittedValues() {\r\n\t\tconst { fields, values } = this.state\r\n\t\t// Get only \"registered\" (non-removed) field values.\r\n\t\tconst fieldValues = getValues(values, fields)\r\n\t\tfor (const key of Object.keys(fieldValues)) {\r\n\t\t\t// Trim strings (if `trim` option is set to `true`, which is the default setting).\r\n\t\t\t// Convert empty strings to `null`s.\r\n\t\t\tfieldValues[key] = this.getSubmittedValue(fieldValues[key])\r\n\t\t}\r\n\t\t// Apply plugins' value transformations.\r\n\t\treturn this.applyPluginValueTransforms(fieldValues)\r\n\t}\r\n\r\n\t// Calls `<form/>`'s `onSubmit` action.\r\n\texecuteFormAction(action, values) {\r\n\t\tconst { onError } = this.props\r\n\t\tlet result\r\n\t\ttry {\r\n\t\t\tresult = action(values)\r\n\t\t} catch (error) {\r\n\t\t\tif (onError(error) === false) {\r\n\t\t\t\tthrow error\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If the form submit action returned a `Promise`\r\n\t\t// then track this `Promise`'s progress.\r\n\t\tif (result && typeof result.then === 'function') {\r\n\t\t\tthis.onSubmitPromise(result).then(this.onAfterSubmit)\r\n\t\t} else {\r\n\t\t\tthis.onAfterSubmit()\r\n\t\t}\r\n\t}\r\n\r\n\tsnapshotFocus() {\r\n\t\t// On Mac, elements that aren't text input elements\r\n\t\t// tend not to get focus assigned to them.\r\n\t\t// Therefore, if the submit button was clicked to submit the form\r\n\t\t// then `document.activeElement` will still be `<body/>`.\r\n\t\tthis.focusableBeforeSubmit = document.activeElement\r\n\t\tif (!document.activeElement || document.activeElement === document.body) {\r\n\t\t\tthis.focusableBeforeSubmit = this.getSubmitButtonNode()\r\n\t\t}\r\n\t}\r\n\r\n\trestoreFocus(force) {\r\n\t\tif (force ||\r\n\t\t\t!document.activeElement ||\r\n\t\t\tdocument.activeElement === document.body) {\r\n\t\t\t// The `<input/>` field might have been remounted right after form submit,\r\n\t\t\t// for example, if the developer calls `form.reset()` in `onSubmit()`.\r\n\t\t\tif (this.focusableBeforeSubmit instanceof Element &&\r\n\t\t\t\t!document.body.contains(this.focusableBeforeSubmit)) {\r\n\t\t\t\tthis.focusableBeforeSubmit = undefined\r\n\t\t\t}\r\n\t\t\tif (this.focusableBeforeSubmit) {\r\n\t\t\t\tthis.focusableBeforeSubmit.focus()\r\n\t\t\t\tthis.focusableBeforeSubmit = undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetFormSubmitting(submitting, callback, forceRestoreFocus) {\r\n\t\tthis.dispatch(setFormSubmitting(submitting), () => {\r\n\t\t\tif (!submitting) {\r\n\t\t\t\tthis.restoreFocus(forceRestoreFocus)\r\n\t\t\t}\r\n\t\t\tif (callback) {\r\n\t\t\t\tcallback()\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tresetFormSubmittingState(forceRestoreFocus) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tif (this.mounted) {\r\n\t\t\t\tconst { wait } = this.props\r\n\t\t\t\tthis.setFormSubmitting(wait, resolve, forceRestoreFocus)\r\n\t\t\t} else {\r\n\t\t\t\tresolve()\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t// Is called when `<form/>` `onSubmit` returns a `Promise`.\r\n\tonSubmitPromise(promise) {\r\n\t\t// When `submitting` flag is set to `true`\r\n\t\t// all fields and the submit button will become disabled.\r\n\t\t// This results in focus being lost.\r\n\t\t// To preserve focus, the currently focused DOM node is noted\r\n\t\t// and after the form is submitted the focus is restored.\r\n\t\t// The focus must be restored after the form re-renders\r\n\t\t// with `submitting: false`, hence the `.setState()` `Promise`.\r\n\t\tthis.snapshotFocus()\r\n\t\tthis.setFormSubmitting(true)\r\n\t\treturn promise.then(\r\n\t\t\t() => this.resetFormSubmittingState(),\r\n\t\t\t(error) => this.resetFormSubmittingState(true).then(() => {\r\n\t\t\t\tconst { onError } = this.props\r\n\t\t\t\tif (onError(error) === false) {\r\n\t\t\t\t\tthrow error\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t)\r\n\t}\r\n\r\n\tonSubmit = (event) => {\r\n\t\tconst { onSubmit, onBeforeSubmit } = this.props\r\n\r\n\t\t// If it's an event handler then `.preventDefault()` it\r\n\t\t// (which is the case for the intended\r\n\t\t//  `<form onSubmit={ submit(...) }/>` use case)\r\n\t\tif (event && typeof event.preventDefault === 'function') {\r\n\t\t\tevent.preventDefault()\r\n\t\t}\r\n\r\n\t\t// Do nothing if the form is submitting\r\n\t\t// (i.e. submit is in progress)\r\n\t\tif (this.state.submitting) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Can be used, for example, to reset\r\n\t\t// custom error messages.\r\n\t\t// (not <Field/> `error`s)\r\n\t\t// E.g. it could be used to reset\r\n\t\t// overall form errors like \"Form submission failed\".\r\n\t\tif (onBeforeSubmit) {\r\n\t\t\tonBeforeSubmit()\r\n\t\t}\r\n\r\n\t\t// Submit the form if it's valid.\r\n\t\t// Otherwise highlight invalid fields.\r\n\t\tif (this.validate()) {\r\n\t\t\tthis.executeFormAction(onSubmit, this.getSubmittedValues())\r\n\t\t}\r\n\t}\r\n\r\n\t// Focuses on a given form field (is used internally + public API).\r\n\tfocus = (field) => {\r\n\t\tif (field) {\r\n\t\t\treturn this.fields[field].focus()\r\n\t\t}\r\n\t\tthis.getFocusable().focus()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a \"focusable\".\r\n\t * @return {(object|Element)} Returns either a `field` object having `.focus()` method or the submit button `Element`.\r\n\t */\r\n\tgetFocusable() {\r\n\t\tif (this.firstField) {\r\n\t\t\treturn this.fields[this.firstField]\r\n\t\t}\r\n\t\treturn this.getSubmitButtonNode()\r\n\t}\r\n\r\n\t// Scrolls to a form field (is used internally + public API).\r\n\tscroll = (field, options) => this.fields[field].scroll(options)\r\n\r\n\t// Clears field value (public API).\r\n\t// If this field hasn't been \"registered\" yet then ignore.\r\n\tclear = (field) => this.set(field, undefined)\r\n\r\n\t// Gets field value (public API).\r\n\tget = (field) => this.state.values[field]\r\n\r\n\t// Sets field value (public API).\r\n\tset = (field, value) => this._set(field, value, {})\r\n\r\n\t// Sets field value.\r\n\t_set = (field, value, { changed }) => {\r\n\t\tthis.dispatch(setFieldValue(field, value))\r\n\t\t// If the field is still mounted.\r\n\t\tif (this.fields[field]) {\r\n\t\t\t// Validate field value.\r\n\t\t\tthis.dispatch(setFieldValidationError(field, this.fields[field].validate(value)))\r\n\t\t\t// Trigger the `<Field/>`'s `onChange()` handler.\r\n\t\t\tif (changed !== false) {\r\n\t\t\t\tconst { onChange } = this.fields[field]\r\n\t\t\t\tif (onChange) {\r\n\t\t\t\t\tonChange(value)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\twatch = (field) => {\r\n\t\tif (!this.watchedFields[field]) {\r\n\t\t\tthis.watchedFields[field] = true\r\n\t\t\tthis.watchedFieldsList.push(field)\r\n\t\t}\r\n\t\treturn this.get(field)\r\n\t}\r\n\r\n\tsetFormNode = (node) => this.form = node\r\n\tgetSubmitButtonNode = () => this.form.querySelector('button[type=\"submit\"]')\r\n\r\n\trender() {\r\n\t\tconst { children } = this.props\r\n\t\tconst { resetCounter, submitting } = this.state\r\n\t\treturn (\r\n\t\t\t<form\r\n\t\t\t\tkey={resetCounter}\r\n\t\t\t\tref={this.setFormNode}\r\n\t\t\t\t{...getPassThroughProps(this.props, Form.propTypes)}\r\n\t\t\t\tonSubmit={this.onSubmit}>\r\n\t\t\t\t<Context.Provider value={this.state}>\r\n\t\t\t\t\t{typeof children === 'function' ?\r\n\t\t\t\t\t\t<Children\r\n\t\t\t\t\t\t\tvalues={this.mounted ? this.values() : undefined}\r\n\t\t\t\t\t\t\treset={this.reset}\r\n\t\t\t\t\t\t\tset={this.set}\r\n\t\t\t\t\t\t\tclear={this.clear}\r\n\t\t\t\t\t\t\tscroll={this.scroll}\r\n\t\t\t\t\t\t\tfocus={this.focus}\r\n\t\t\t\t\t\t\twatch={this.watch}\r\n\t\t\t\t\t\t\tsubmitting={submitting}>\r\n\t\t\t\t\t\t\t{children}\r\n\t\t\t\t\t\t</Children> :\r\n\t\t\t\t\t\tchildren\r\n\t\t\t\t\t}\r\n\t\t\t\t</Context.Provider>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Added a functional `Children` component to work around a React warning:\r\n// \"Invalid hook call. Hooks can only be called inside of the body of a function component\".\r\nfunction Children({\r\n\tvalues,\r\n\treset,\r\n\tset,\r\n\tclear,\r\n\tscroll,\r\n\tfocus,\r\n\twatch,\r\n\tsubmitting,\r\n\tchildren\r\n}) {\r\n\treturn children({\r\n\t\tvalues,\r\n\t\treset,\r\n\t\tset,\r\n\t\tclear,\r\n\t\tscroll,\r\n\t\tfocus,\r\n\t\twatch,\r\n\t\tsubmitting\r\n\t})\r\n}\r\n\r\nChildren.propTypes = {\r\n\tvalues: PropTypes.object,\r\n\treset: PropTypes.func.isRequired,\r\n\tset: PropTypes.func.isRequired,\r\n\tclear: PropTypes.func.isRequired,\r\n\tscroll: PropTypes.func.isRequired,\r\n\tfocus: PropTypes.func.isRequired,\r\n\twatch: PropTypes.func.isRequired,\r\n\tsubmitting: PropTypes.bool,\r\n\tchildren: PropTypes.func.isRequired\r\n}\r\n\r\nfunction generateInitialFormState(initialValues = {}, { submitting = false } = {}) {\r\n\treturn {\r\n\t\t// `mounted`/`unmounted` counters for each form field.\r\n\t\tfields : {},\r\n\r\n\t\t// Current form field values.\r\n\t\tvalues : {},\r\n\r\n\t\t// Initial form field values.\r\n\t\tinitialValues,\r\n\r\n\t\t// Externally set `error`s on form fields.\r\n\t\terrors : {},\r\n\r\n\t\t// The results of `validate()` functions called on\r\n\t\t// the corresponding form field `value`s.\r\n\t\tvalidationErrors : {},\r\n\r\n\t\t// Whether should show field errors.\r\n\t\tshowErrors : {},\r\n\r\n\t\t// Is used for tracking abandoned forms for Google Analytics.\r\n\t\tlatestFocusedField : undefined,\r\n\r\n\t\t// If `onSubmit` returns a `Promise` (or is `async/await`)\r\n\t\t// then `submitting` will be `true` until `onSubmit` finishes.\r\n\t\tsubmitting\r\n\t}\r\n}\r\n\r\nexport const contextPropType = PropTypes.shape({\r\n\tfields: PropTypes.object.isRequired,\r\n\tvalues: PropTypes.object.isRequired,\r\n\tinitialValues: PropTypes.object.isRequired,\r\n\terrors: PropTypes.object.isRequired,\r\n\tvalidationErrors: PropTypes.object.isRequired,\r\n\tshowErrors: PropTypes.object.isRequired,\r\n\tsubmitting: PropTypes.bool.isRequired,\r\n\tonRegisterField: PropTypes.func.isRequired,\r\n\tonUnregisterField: PropTypes.func.isRequired,\r\n\tonRegisterList: PropTypes.func.isRequired,\r\n\tgetSubmittedValue: PropTypes.func.isRequired,\r\n\tfocus: PropTypes.func.isRequired,\r\n\tdispatch: PropTypes.func.isRequired,\r\n\tgetRequiredMessage: PropTypes.func.isRequired,\r\n\tgetValues: PropTypes.func.isRequired\r\n})"]}